sapply(pacotes, require, character = T)
}
pacotes <- c("tidyverse","rgdal","spdep","knitr","kableExtra","tmap","gtools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando um shapefile:
shp_sp <- readOGR(dsn = "shapefile_sp", layer = "estado_sp")
# Visualizando o shapefile
plot(shp_sp)
# Estabelecendo vizinhanças por contiguidade, critério queen:
vizinhos_queen <- poly2nb(pl = shp_sp,
queen = TRUE,
row.names = shp_sp@data$NM_MUNICIP)
View(vizinhos_queen)
# Visualizando a vizinhança estabelecida:
plot(shp_sp, border = "lightgray")
plot(vizinhos_queen,
coordinates(shp_sp),
add = TRUE,
col = "#33638DFF")
gc()
# Informações relevantes sobre a vizinhança queen estabelecida:
summary(vizinhos_queen)
# Ok! Cadê a matriz W?
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B")
# No caso, a ilha diz respeito ao município de Ilhabela. Para contornar a
# situação, podemos utilizar o argumento zero.policy = TRUE.
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B",
zero.policy = TRUE)
View(matrizW_queen)
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_queen) <- shp_sp@data$NM_MUNICIP
View(matrizW_queen)
# E se a ideia fosse o estabelecimento de contiguidades de outras ordens?
vizinhos_queen_ordens <- nblag(neighbours = vizinhos_queen, maxlag = 5)
vizinhos_queen_ordens[[1]] #Contiguidades de ordem 1
vizinhos_queen_ordens[[2]] #Contiguidades de ordem 2
vizinhos_queen_ordens[[3]] #Contiguidades de ordem 3
vizinhos_queen_ordens[[4]] #Contiguidades de ordem 4
vizinhos_queen_ordens[[5]] #Contiguidades de ordem 5
# Exemplo de plotagem com ordens superiores de contiguidades:
plot(shp_sp, border = "lightgray")
plot(vizinhos_queen_ordens[[2]],
coordinates(shp_sp),
add = TRUE,
col = "#33638DFF")
# Carregando um shapefile:
shp_ba <- readOGR(dsn = "shapefile_ba",
layer = "ba_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Estabelecendo vizinhanças por distâncias geográficas:
vizinhos_distancias <- dnearneigh(coordinates(shp_ba),
d1 = 0,
d2 = 90,
longlat = TRUE)
# Informações relevantes sobre a vizinhança estabelecida:
summary(vizinhos_distancias)
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_ba, border = "lightgray")
plot(vizinhos_distancias,
coordinates(shp_ba),
add = TRUE,
col = "#CC6A70FF")
# A matriz W pode ser extraída da seguinte forma:
matrizW_distancias <- nb2mat(neighbours = vizinhos_distancias,
style = "B")
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_distancias) <- shp_ba@data$MUNICIPIO
rownames(matrizW_distancias) <- shp_ba@data$MUNICIPIO
View(matrizW_distancias)
# Carregando um shapefile:
shp_sc <- readOGR(dsn = "shapefile_sc",
layer = "sc_state",
encoding = "UTF-8",
use_iconv = TRUE)
# Para a abordagem, o primeiro passo é a criação de um objeto do tipo lista
# que contenha os outputs da função knearneigh.
lista_knear <- knearneigh(coordinates(shp_sc),
longlat = TRUE,
k = 3)
# Depois, esse objeto do tipo lista pode ser transformado em um objeto que
# contenha as vizinhanças calculas:
vizinhos_knear <- knn2nb(knn = lista_knear)
# Informações relevantes sobre a vizinhança estabelecida:
vizinhos_knear
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_sc, border = "lightgray")
plot(vizinhos_knear,
coordinates(shp_sc),
add = TRUE,
col = "#13306DFF")
# A matriz W pode ser extraída da seguinte forma:
matrizW_knear  <- nb2mat(neighbours = vizinhos_knear,
style = "B")
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_knear) <- shp_sc@data$NM_MUNICIP
rownames(matrizW_knear) <- shp_sc@data$NM_MUNICIP
View(matrizW_knear)
# Carregando uma base de dados:
load("dados_sp.RData")
# Juntando a base de dados ao shapefile do Estado de SP:
shp_sp@data %>%
rename(codigo = 2) %>%
mutate(codigo = as.numeric(codigo)) %>%
left_join(dados_sp, by = "codigo") -> shp_sp@data
# Verificando o join:
shp_sp@data %>%
kable() %>%
kable_styling(bootstrap_options = "striped",
full_width = TRUE,
font_size = 12)
shp_sp@data$pib
# Desta forma, apenas para facilitar o cálculo, vamos padronizar a variável pib
# pelo procedimento zscores:
shp_sp@data["Zpib"] <- scale(shp_sp@data$pib)
summary(shp_sp@data)
mean(shp_sp@data$Zpib)
# A matriz de distâncias sociais pode ser obtida da seguinte maneira:
matrizW_distsocial <- distancia_social(x = shp_sp@data$Zpib,
dmin = 0,
dmax = 0.01,
style = "B")
mean(shp_sp@data$Zpib)
# A matriz de distâncias sociais pode ser obtida da seguinte maneira:
matrizW_distsocial <- distancia_social(x = shp_sp@data$Zpib,
dmin = 0,
dmax = 0.01,
style = "B")
distancia_social <- function(x, dmin, dmax, style){
vessel.list <- base::list()
x <- base::data.frame(x = x)
for(i in 1:base::nrow(x)){
y <- x$x[i]
x %>%
dplyr::mutate(index = ifelse(x >= y & x <= y + dmax,
yes = 1,
no = 0)) %>%
dplyr::select(index) -> vector
vector <- base::as.vector(base::unlist(vector))
vector[[i]] <- 0
vessel.list[[i]] <- vector
}
data <- base::matrix(base::unlist(vessel.list), ncol = base::nrow(x), byrow = T)
if(style == "W"){
wdata <- data * 1/base::rowSums(data)
wdata[base::is.nan(wdata)] <- 0
return(wdata)}
else if(style == "C"){
sum.vector <- base::rowSums(data) == 0
sum.verifier <- base::as.numeric(sum.vector)
no.links <- base::sum(sum.verifier)
links <- base::NROW(data) - no.links
weightsC <- links / base::sum(data)
vectorC <- base::gsub(1, weightsC, data)
cdata <- base::matrix(vectorC, ncol = base::NCOL(data), nrow = base::NROW(data))
return(cdata)}
else if(style == "U"){
sum.vector <- base::rowSums(data) == 0
sum.verifier <- base::as.numeric(sum.vector)
no.links <- base::sum(sum.verifier)
links <- base::NROW(data) - no.links
weightsC <- links / base::sum(data)
weightsU <- weightsC / links
vectorU <- base::gsub(1, weightsU, data)
udata <- base::matrix(vectorU, ncol = base::NCOL(data), nrow = base::NROW(data))
return(udata)}
else if(style == "S"){
step1 <- base::sqrt(base::rowSums(data^2))
res.step1 <- data / step1
res.step1[base::is.nan(res.step1)] <- 0
step2 <- base::sum(res.step1)
sum.vector <- base::rowSums(data) == 0
sum.verifier <- base::as.numeric(sum.vector)
no.links <- base::sum(sum.verifier)
links <- base::NROW(data) - no.links
step3 <- links / step2
sdata <- res.step1 * step3
return(sdata)
}
else if(style == "B"){return(data)}
else {break()}
}
# A matriz de distâncias sociais pode ser obtida da seguinte maneira:
matrizW_distsocial <- distancia_social(x = shp_sp@data$Zpib,
dmin = 0,
dmax = 0.01,
style = "B")
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_distsocial) <- shp_sp@data$NM_MUNICIP
rownames(matrizW_distsocial) <- shp_sp@data$NM_MUNICIP
View(matrizW_distsocial)
# A vizinhança pode ser calculada da seguinte forma:
vizinhos_distsocial <- mat2listw(x = matrizW_distsocial)
plot(vizinhos_distsocial,
coordinates(shp_sp),
add = TRUE,
col = "#FDE725FF")
# Visualizando a vizinhança estabelecida:
plot.new()
plot(shp_sp, border = "lightgray")
plot(vizinhos_distsocial,
coordinates(shp_sp),
add = TRUE,
col = "#FDE725FF")
# Utilizaremos o objeto vizinhos_queen:
vizinhos_queen
# Para a definição da matriz W padronizada em linha:
matrizW_queen_linha <- nb2mat(vizinhos_queen,
style = "W",
zero.policy = TRUE)
# Para uma melhor visualização do novo objeto matrizW_queen_linha:
colnames(matrizW_queen_linha) <- rownames(matrizW_queen_linha)
View(matrizW_queen_linha)
# Para a definição da matriz W duplamente padronizada:
matrizW_queen_dupla_padr <- nb2mat(vizinhos_queen,
style = "U",
zero.policy = TRUE)
# Para uma melhor visualização do novo objeto matrizW_queen_dupla_padr:
colnames(matrizW_queen_dupla_padr) <- rownames(matrizW_queen_dupla_padr)
View(matrizW_queen_dupla_padr)
# Para a definição da matriz W duplamente padronizada:
matrizW_queen_est_var <- nb2mat(vizinhos_queen,
style = "S",
zero.policy = TRUE)
# Para uma melhor visualização do novo objeto matrizW_queen_est_var:
colnames(matrizW_queen_est_var) <- rownames(matrizW_queen_est_var)
View(matrizW_queen_est_var)
# Antes de dar prosseguimento aos estudos das autocorrelações espaciais sobre
# a variável IDH, vamos observar alguns comportamentos:
tm_shape(shp = shp_sp) +
tm_fill(col = "idh", style = "quantile", n = 5, palette = "-magma") +
tm_borders()
# pacotes
library(tidyverse)
library(stringr)
# o básico de string
string1 <- "This is a string"
string2 <- 'To put a "quote" inside a string, use single quotes'
# escapes
double_quotes <- "\"" # or '"'
double_quotes <- '\'' # or '"'
double_quotes
writeLines(double_quotes)
# Mais caracteres especiais
x <- "\u005b"
x
# Mais caracteres especiais
x <- "\u00b5"
x
# Comprimento de uma string
str_length(c('a', 'R for data science', NA))
# combinando string
str_c("x", "y")
# combinando string com argumento sep para separar
str_c("x", "y", sep = ",")
# combinando string com argumento sep para separar
str_c("x", "y", sep = ", ")
# str_c é vetorizada e recicla automaticamente os vetores mais curtos
str_c("prefix-", c("a", "b", "c"), "-suffix")
name <- "Renato"
time_of_day <- "morning"
birthday <- FALSE
str_c(
"Good", time_of_day, " ", name,
if (birthday) "and HAPPY BIRTHDAY"
)
str_c(c("x","y","z"), collapse = ",")
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 3)
# negative numbers count backwards from end
str_sub(x, -3, -1)
# não falhará se a string for curta demais. Ela só retornará o máximo possível
str_sub(x, 1, 5)
# não falhará se a string for curta demais. Ela só retornará o máximo possível
str_sub(a, 1, 5)
# não falhará se a string for curta demais. Ela só retornará o máximo possível
str_sub("a", 1, 5)
# podemos usar o str_sub para modificar strings
str_sub(x, 1, 1) <- str_to_lower(str_sub(x, 1, 1))
x
library(nycflights13)
library(tidyverse)
library(stringr)
# localizações - página 199
# str_to_lower() - textos minúsculas
# str_to_upper() - textos maiúsculos
str_to_upper(c("i", "l"))
str_to_lower(c("TEXT", "L"))
# # order() e sort()
x <- c('apple', 'eggplant', 'banana')
str_sort(x, locale = "en") # English
str_sort(x, locale = "han") # Hawaiian
str_sort(x, locale = "haw") # Hawaiian
library(forcats)
# 2 problemas
# Há 12 meses possíveis, e não há nada que lhe salve de erros de digitação
# Não dá para ordenar de maneira útil:
sort(x1)
x1 <- c("Dec", "Apr", "Jan", "Mar")
# 2 problemas
# Há 12 meses possíveis, e não há nada que lhe salve de erros de digitação
# Não dá para ordenar de maneira útil:
sort(x1)
# podemos corrigir os dois problemas com um fator
month_levels <- c(
"Jan", "Feb", "Mar", "Apr", "May", "jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
)
# agora podemos criar um fator
y1 <- factor(x1, levels = month_levels)
y1
# agora podemos criar um fator
y1 <- factor(x1, levels = month_levels)
y1
y1
sort(y1)
gc()
pacotes <- c("tidyverse","rgdal","spdep","knitr","kableExtra","tmap","gtools")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Carregando um shapefile:
shp_sp <- readOGR(dsn = "shapefile_sp", layer = "estado_sp")
# Estabelecendo vizinhanças por contiguidade, critério queen:
vizinhos_queen <- poly2nb(pl = shp_sp,
queen = TRUE,
row.names = shp_sp@data$NM_MUNICIP)
# Ok! Cadê a matriz W?
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B")
# Estabelecendo vizinhanças por contiguidade, critério queen:
vizinhos_queen <- poly2nb(pl = shp_sp,
queen = TRUE,
row.names = shp_sp@data$NM_MUNICIP)
# Ok! Cadê a matriz W?
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B")
# No caso, a ilha diz respeito ao município de Ilhabela. Para contornar a
# situação, podemos utilizar o argumento zero.policy = TRUE.
matrizW_queen <- nb2mat(neighbours = vizinhos_queen,
style = "B",
zero.policy = TRUE)
# Estabelecendo vizinhanças por distâncias geográficas:
vizinhos_distancias <- dnearneigh(coordinates(shp_ba),
d1 = 0,
d2 = 90,
longlat = TRUE)
# A matriz W pode ser extraída da seguinte forma:
matrizW_rook <- nb2mat(neighbours = vizinhos_rook,
style = "B",
zero.policy = TRUE)
# Para facilitar o estudo da nossa matriz W, podemos comandar:
colnames(matrizW_rook) <- shp_sp@data$NM_MUNICIP
gc()
# Pré-requisitos
library(tidyverse)
library(forcats)
# pág. 225 - general social survey
# https://gss.norc.org
forcast::gss_cat
# pág. 225 - general social survey
# https://gss.norc.org
forcats::gss_cat
gss_cat %>%
count(race)
# ou com gráfico de barras
ggplot(gss_cat, aes(race)) +
geom_bar()
# por padrão, ggplot2 deixará de lado os níveis que não têm valor. Podemos
# forçar sua exibição
ggplot(gss_cat, aes(race)) +
geom_bar() +
scale_x_discrete(drop = FALSE)
# Modificando a ordem dos fatores
relig <- gss_cat %>%
group_by(relig) %>%
summarize(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE)
)
ggplot(relig, aes(tvhours, relig)) +
geom_point()
# libraries
library(tidyverse)
library(lubridate)
library(nycflights13)
# Criando data/hora
today()
now()
ymd("2017-01-31")
mdy("January 31st, 2017")
dmy("31-Jan-2017")
mdy("Janeiro 31, 2017")
mdy("January 31st, 2017")
dmy("31-Jan-2017")
ymd(20170131)
ymd_hms("2017-01-31 20:11:59")
ymd(20170131, tz = "UTC") # forçando um fuso-horário - tz == timezone
# 2 - a partir de componentes individuais de data-hora
flights %>%
select(year, month, day, hour, minute)
# para criar uma data/hora a partir desse tipo de entrada, use
# make_date() para datas ou make_datetime() para datas-horas
flights %>%
select(year, month, day, hour, minute) %>%
mutate(
departure = make_datetime(year, month, day, hour, minute)
)
# 3 - a partir de um objetivo data/hora existe
as_date(today())
# 3 - a partir de um objetivo data/hora existe
as_datetime(today())
# as vezes obtemos datas/horas como offsets numéricos de "Unix Epoch"
as_datetime(60 * 60 * 10)
as_date(365 * 10 + 2)
"1980-01-01"
# # Intervalos de Tempo
# How old is Hadley?
h_age <- today() - ymd(19791014)
h_age
as.duration(h_age)
onds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0
dseconds(15)
dseconds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0:5)
# Perídos - página 250
one_pm
# Fusos horários
Sys.timezone()
length(OlsonNames())
# Começamos definindo um objeto para representar o coelhinho Foo Foo]
foo_foo <- litle_bunny()
diamonds <- ggplot2::diamonds
diamonds2 <- diamonds %>%
dplyr::mutate(price_per_carat = price / carat)
pryr::object_size(diamonds)
pryr::object_size(diamonds)
diamonds <- ggplot2::diamonds
diamonds2 <- diamonds %>%
dplyr::mutate(price_per_carat = price / carat)
pryr::object_size(diamonds)
pryr::object_size(diamonds2)
pryr::object_size(diamonds, diamonds2)
library(magrittr)
pryr::object_size(diamonds)
pryr::object_size(diamonds2)
pryr::object_size(diamonds, diamonds2)
df <- tibble::tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
)
df$a <- (df$a - min(df$a, na.rm = TRUE)) /
(max(df$a, na.rm = TRUE)) - min(df$a, na-rm = TRUE)
df$a <- (df$a - min(df$a, na.rm = TRUE)) /
(max(df$a, na.rm = TRUE) - min(df$a, na-rm = TRUE))
df$a <- (df$a - min(df$a, na.rm = TRUE)) /
(max(df$a, na.rm = TRUE) - min(df$a, na.rm = TRUE))
(x - min(x, na.rm = TRUE))
(x - min(x, na.rm = TRUE)) /
(max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
x <- df$a
(x - min(x, na.rm = TRUE)) /
(max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
(x - rng[1]) / (rng[2] - rng[1])
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
# Agora que simplificamos o código, podemos tranformá-lo em uma função:
rescale01 <- function(x) {
rgn <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,5,10))
l
l
rgn <- range(x, na.rm = TRUE)
rescale01(c(0,5,10))
rng <- range(x, na.rm = TRUE)
rescale01(c(0,5,10))
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
# Agora que simplificamos o código, podemos tranformá-lo em uma função:
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
rescale01(c(0,5,10))
rescale01(c(1111,5555,4646))
